/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { TaskDTO } from '../model/taskDTO';
import { TaskDTORequestView } from '../model/taskDTORequestView';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class TaskAdminControllerService {
  protected basePath = '//localhost/';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * createTask
   *
   * @param body taskDTO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createTaskUsingPOST(body: TaskDTORequestView, observe?: 'body', reportProgress?: boolean): Observable<TaskDTO>;
  public createTaskUsingPOST(body: TaskDTORequestView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskDTO>>;
  public createTaskUsingPOST(body: TaskDTORequestView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskDTO>>;
  public createTaskUsingPOST(body: TaskDTORequestView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createTaskUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<TaskDTO>('post', `${this.basePath}/admin/task/`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * deleteDecision
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteDecisionUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deleteDecisionUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deleteDecisionUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deleteDecisionUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling deleteDecisionUsingDELETE.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('delete', `${this.basePath}/admin/task/decision/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * deleteTask
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteTaskUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deleteTaskUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deleteTaskUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deleteTaskUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling deleteTaskUsingDELETE.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('delete', `${this.basePath}/admin/task/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * getTasksByAuthorId
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getTasksByAuthorIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TaskDTO>>;
  public getTasksByAuthorIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TaskDTO>>>;
  public getTasksByAuthorIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TaskDTO>>>;
  public getTasksByAuthorIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getTasksByAuthorIdUsingGET.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<TaskDTO>>('get', `${this.basePath}/admin/task/author/${encodeURIComponent(String(id))}/tasks`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * linkWithTopic
   *
   * @param id id
   * @param topicId topicId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public linkWithTopicUsingPUT1(id: number, topicId: number, observe?: 'body', reportProgress?: boolean): Observable<TaskDTO>;
  public linkWithTopicUsingPUT1(id: number, topicId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskDTO>>;
  public linkWithTopicUsingPUT1(id: number, topicId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskDTO>>;
  public linkWithTopicUsingPUT1(id: number, topicId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling linkWithTopicUsingPUT1.');
    }

    if (topicId === null || topicId === undefined) {
      throw new Error('Required parameter topicId was null or undefined when calling linkWithTopicUsingPUT1.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<TaskDTO>(
      'put',
      `${this.basePath}/admin/task/${encodeURIComponent(String(id))}/task/${encodeURIComponent(String(topicId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * makeArchived
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public makeArchivedUsingPOST2(id: number, observe?: 'body', reportProgress?: boolean): Observable<TaskDTO>;
  public makeArchivedUsingPOST2(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskDTO>>;
  public makeArchivedUsingPOST2(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskDTO>>;
  public makeArchivedUsingPOST2(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling makeArchivedUsingPOST2.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<TaskDTO>('post', `${this.basePath}/admin/task/${encodeURIComponent(String(id))}/archived`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * makePublished
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public makePublishedUsingPOST2(id: number, observe?: 'body', reportProgress?: boolean): Observable<TaskDTO>;
  public makePublishedUsingPOST2(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskDTO>>;
  public makePublishedUsingPOST2(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskDTO>>;
  public makePublishedUsingPOST2(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling makePublishedUsingPOST2.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<TaskDTO>('post', `${this.basePath}/admin/task/${encodeURIComponent(String(id))}/published`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * makeUnpublished
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public makeUnpublishedUsingPOST2(id: number, observe?: 'body', reportProgress?: boolean): Observable<TaskDTO>;
  public makeUnpublishedUsingPOST2(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskDTO>>;
  public makeUnpublishedUsingPOST2(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskDTO>>;
  public makeUnpublishedUsingPOST2(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling makeUnpublishedUsingPOST2.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<TaskDTO>('post', `${this.basePath}/admin/task/${encodeURIComponent(String(id))}/unpublished`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * updateTaskAddons
   *
   * @param addonId addonId
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateTaskAddonsUsingPUT(addonId: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public updateTaskAddonsUsingPUT(addonId: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public updateTaskAddonsUsingPUT(addonId: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public updateTaskAddonsUsingPUT(addonId: number, id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (addonId === null || addonId === undefined) {
      throw new Error('Required parameter addonId was null or undefined when calling updateTaskAddonsUsingPUT.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateTaskAddonsUsingPUT.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('put', `${this.basePath}/admin/task/${encodeURIComponent(String(id))}/addon/${encodeURIComponent(String(addonId))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * updateTaskExtensions
   *
   * @param extensionId extensionId
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateTaskExtensionsUsingPUT(extensionId: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public updateTaskExtensionsUsingPUT(extensionId: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public updateTaskExtensionsUsingPUT(extensionId: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public updateTaskExtensionsUsingPUT(extensionId: number, id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (extensionId === null || extensionId === undefined) {
      throw new Error('Required parameter extensionId was null or undefined when calling updateTaskExtensionsUsingPUT.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateTaskExtensionsUsingPUT.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>(
      'put',
      `${this.basePath}/admin/task/${encodeURIComponent(String(id))}/extension/${encodeURIComponent(String(extensionId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * updateTaskReplacements
   *
   * @param id id
   * @param replacementId replacementId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateTaskReplacementsUsingPUT(id: number, replacementId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public updateTaskReplacementsUsingPUT(id: number, replacementId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public updateTaskReplacementsUsingPUT(id: number, replacementId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public updateTaskReplacementsUsingPUT(id: number, replacementId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateTaskReplacementsUsingPUT.');
    }

    if (replacementId === null || replacementId === undefined) {
      throw new Error('Required parameter replacementId was null or undefined when calling updateTaskReplacementsUsingPUT.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>(
      'put',
      `${this.basePath}/admin/task/${encodeURIComponent(String(id))}/replacement/${encodeURIComponent(String(replacementId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * updateTaskSimplifications
   *
   * @param id id
   * @param simplificationId simplificationId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateTaskSimplificationsUsingPUT(id: number, simplificationId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public updateTaskSimplificationsUsingPUT(id: number, simplificationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public updateTaskSimplificationsUsingPUT(id: number, simplificationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public updateTaskSimplificationsUsingPUT(id: number, simplificationId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateTaskSimplificationsUsingPUT.');
    }

    if (simplificationId === null || simplificationId === undefined) {
      throw new Error('Required parameter simplificationId was null or undefined when calling updateTaskSimplificationsUsingPUT.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>(
      'put',
      `${this.basePath}/admin/task/${encodeURIComponent(String(id))}/simplification/${encodeURIComponent(String(simplificationId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * updateTask
   *
   * @param body taskDTO
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateTaskUsingPUT(body: TaskDTORequestView, id: number, observe?: 'body', reportProgress?: boolean): Observable<TaskDTO>;
  public updateTaskUsingPUT(body: TaskDTORequestView, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskDTO>>;
  public updateTaskUsingPUT(body: TaskDTORequestView, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskDTO>>;
  public updateTaskUsingPUT(body: TaskDTORequestView, id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling updateTaskUsingPUT.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateTaskUsingPUT.');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<TaskDTO>('put', `${this.basePath}/admin/task/${encodeURIComponent(String(id))}`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }
}
